import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { login, signup } from '~/services/authServices';
import Cookies from 'universal-cookie';

export const loginUser = createAsyncThunk('user/loginUser', async (data, { rejectWithValue }) => {
    try {
        const response = await login(data);
        const cookies = new Cookies();
        cookies.set('token', response.token, { path: '/', expires: 1 });
        return response;
    } catch (error) {
        return rejectWithValue(error.response.data);
    }
});

export const signupUser = createAsyncThunk('user/signupUser', async (data, { rejectWithValue }) => {
    try {
        const response = await signup(data);
        localStorage.setItem('username', data.username);
        localStorage.setItem('password', data.password);
        return response;
    } catch (error) {
        return rejectWithValue(error.response.data);
    }
});

export const verifyRegisterUser = createAsyncThunk('user/verifyRegisterUser', async (data, { rejectWithValue }) => {
    try {
        const response = await signup(data);
        return response;
    } catch (error) {
        return rejectWithValue(error.response.data);
    }
});

const userSlice = createSlice({
    name: 'user',
    initialState: {
        loading: false,
        user: null,
        error: null,
    },
    extraReducers: (builder) => {
        // Handle pending, fulfilled, and rejected actions generated by createAsyncThunk
        //login
        builder.addCase(loginUser.pending, (state) => {
            state.loading = true;
        });
        builder.addCase(loginUser.fulfilled, (state, action) => {
            state.loading = false;
            state.user = action.payload;
            state.error = null;
        });
        builder.addCase(loginUser.rejected, (state, action) => {
            state.loading = false;
            state.error = action.payload;
        });

        //signup

        builder.addCase(signupUser.pending, (state) => {
            state.loading = true;
        });
        builder.addCase(signupUser.fulfilled, (state, action) => {
            state.loading = false;
            state.error = null;
        });
        builder.addCase(signupUser.rejected, (state, action) => {
            state.loading = false;
            state.error = action.payload;
        });
    },
});

export default userSlice.reducer;
